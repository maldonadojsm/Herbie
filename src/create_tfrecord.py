"""
Script inspired by:

https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/using_your_own_dataset.md

# Create train data:
python create_tfrecord.py --label=<LABEL> --csv_input=<PATH_TO_ANNOTATIONS_FOLDER>/train_labels.csv  --output_path=<PATH_TO_ANNOTATIONS_FOLDER>/train.record <PATH_TO_ANNOTATIONS_FOLDER>/label_map.pbtxt

# Create test data:
python create_tfrecord.py --label=<LABEL> --csv_input=<PATH_TO_ANNOTATIONS_FOLDER>/test_labels.csv  --output_path=<PATH_TO_ANNOTATIONS_FOLDER>/test.record  --label_map <PATH_TO_ANNOTATIONS_FOLDER>/label_map.pbtxt

"""

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

import os
import io
import pandas as pd
import tensorflow as tf
import sys

sys.path.append("../../models/research")

from PIL import Image
from object_detection.utils import label_map_util
from object_detection.utils import dataset_util
from collections import namedtuple, OrderedDict

flags = tf.compat.v1.app.flags
flags.DEFINE_string("csv", "", "Path to the CSV input")
flags.DEFINE_string("output", "", "Path to output TFRecord")
flags.DEFINE_string(
    "label_map",
    "",
    "File path pointing to `label_map.pbtxt`. Stores <class_name>:<class_index> pairs generated by xml_to_csv.py",
)

flags.DEFINE_string("image_path", "", "Path to images")
FLAGS = flags.FLAGS


def split(df, group):
    """
    Organizes label map by groups
    """
    data = namedtuple("data", ["file_name", "object"])
    gb = df.groupby(group)
    return [
        data(filename, gb.get_group(x))
        for filename, x in zip(gb.groups.keys(), gb.groups)
    ]


def create_tf_example(label_group, file_path, label_map):
    """
    Creates TF record using generated label map,  
    """
    with tf.gfile.GFile(
            os.path.join(file_path, "{}".format(label_group.filename)),
            "rb") as file_id:
        encoded_jpg = file_id.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)

    image = Image.open(encoded_jpg_io)
    width, height = image.size

    filename = label_group.file_name.encode("utf8")
    img_format = b"jpg"
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in label_group.object.iterrows():
        xmins.append(row["xmin"] / width)
        xmaxs.append(row["xmax"] / width)
        ymins.append(row["ymin"] / height)
        ymaxs.append(row["ymax"] / height)
        classes_text.append(row["class"].encode("utf8"))
        class_index = label_map.get(row["class"])

        assert (
            class_index is not None
        ), "ERROR - Class Label: `{}` hasn't been found  in label_map: {}".format(
            row["class"], label_map)
        classes.append(class_index)

    tf_example = tf.train.Example(features=tf.train.Features(
        feature={
            "image/height":
            dataset_util.int64_feature(height),
            "image/width":
            dataset_util.int64_feature(width),
            "image/filename":
            dataset_util.bytes_feature(filename),
            "image/source_id":
            dataset_util.bytes_feature(filename),
            "image/encoded":
            dataset_util.bytes_feature(encoded_jpg),
            "image/format":
            dataset_util.bytes_feature(img_format),
            "image/object/bbox/xmin":
            dataset_util.float_list_feature(xmins),
            "image/object/bbox/xmax":
            dataset_util.float_list_feature(xmaxs),
            "image/object/bbox/ymin":
            dataset_util.float_list_feature(ymins),
            "image/object/bbox/ymax":
            dataset_util.float_list_feature(ymaxs),
            "image/object/class/text":
            dataset_util.bytes_list_feature(classes_text),
            "image/object/class/label":
            dataset_util.int64_list_feature(classes),
        }))
    return tf_example


def main(_):
    tf_writer = tf.compat.v1.python_io.TFRecordWriter(FLAGS.output)
    file_path = os.path.join(os.getcwd(), FLAGS.image_path)
    dataset = pd.read_csv(FLAGS.csv)

    label_map = label_map_util.load_labelmap(FLAGS.label_map)
    label_categories = label_map_util.convert_label_map_to_categories(
        label_map, max_num_classes=90, use_display_name=True)

    category_index = label_map_util.create_category_index(label_categories)
    label_map = {}
    for i, j in category_index.items():
        label_map[j.get("name")] = j.get("id")

    # Organize labels by group
    grouped_labels = split(dataset, "file_name")
    for i in grouped_labels:
        tf_example = create_tf_example(i, file_path, label_map)
        tf_writer.write(tf_example.SerializeToString())

    tf_writer.close()
    output_path = os.path.join(os.getcwd(), FLAGS.output_path)
    print("TFRecords Successfully Created In: {}".format(output_path))


if __name__ == "__main__":
    tf.compat.v1.app.run()
